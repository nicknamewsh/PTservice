package com.pt.ssm.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.pt.ssm.dao.AnnouncementDao;
import com.pt.ssm.po.Announcement;
import com.pt.ssm.service.AnnouncementService;
import com.pt.ssm.util.ModelBean;
import com.pt.ssm.util.ModelResults;
@Service
@Transactional
public class AnnouncementServiceImpl implements AnnouncementService{
@Autowired
private AnnouncementDao dao;
	@Override
	public ModelResults getDateList(String noticetitle, long page, long size)
			 {
		Map<String,Object> param = new HashMap<String, Object>();
		param.put("noticetitle", noticetitle);
		param.put("pageSize", size);
		param.put("pageNum", page);
		ModelResults model = new ModelResults(page, size);
		List<Map<String, Object>> list = null;
		long count = 0;
		try {
			  list = dao.getData(param);
			  count = dao.getCount(param);
		} catch (Exception e) {
			e.printStackTrace();
			return model;
		}
		model.setRows(list);
		model.setTotal(count);
		return model;
	}

	@Override
	public ModelBean addAnnouncement(Announcement announce) {
		Map<String,Object> param = new HashMap<String, Object>();
		param.put("noticeconent", announce.getNoticeconent());
		param.put("noticeperson", announce.getNoticeperson());
		param.put("noticestatues", announce.getNoticestatues());
		param.put("noticetime", announce.getNoticetime());
		param.put("statues", announce.getStatues());
		param.put("noticetitle", announce.getNoticetitle());
		ModelBean bean = new ModelBean();
		long n = 0;
		try {
			n = dao.addAnnounce(param);
			bean.setData(n);
		} catch (Exception e) {
			
			e.printStackTrace();
		}
		return bean;
	}
	@Override
	public ModelBean deleteAnnouncement(long[] id) {
		ModelBean bean = new ModelBean();
		int n = 0;
		try {
			n = dao.deleteAnnounce(id);
			bean.setData(n);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return bean;
	}
	@Override
	public ModelBean updateAnnouncement(Announcement announce) {
		ModelBean bean = new ModelBean();
		Map<String,Object> param = new HashMap<String, Object>();
		param.put("noticeconent", announce.getNoticeconent());
		param.put("noticeperson", announce.getNoticeperson());
		param.put("noticestatues", announce.getNoticestatues());
		param.put("noticetime", announce.getNoticetime());
		param.put("statues", announce.getStatues());
		param.put("id", announce.getId());
		param.put("noticetitle", announce.getNoticetitle());
		long n = 0;
		try {
			n = dao.updateAnnounce(param);
			bean.setData(n);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return bean;
	}
	@Override
	public ModelBean getAnnouncementById(long id) {
		Announcement an = new Announcement();
		ModelBean bean = new ModelBean();
		try {
			an = dao.getOneById(id);
			bean.setData(an);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return bean;
	}
	
	
	
	@Override
	public ModelResults getAnnomentListsh(String Noticetitle, long page, long size)
			 {
		
		Map<String,Object> param = new HashMap<String, Object>();
		param.put("Noticetitle", Noticetitle);
		param.put("pageSize", size);
		param.put("page", page);
		ModelResults model = new ModelResults(page, size);
		List<Map<String, Object>> list = null;
		long count = 0;
		try {
			  list = dao.getDatash(param);
			  count = dao.getCountsh(param);
		} catch (Exception e) {
			e.printStackTrace();
			return model;
		}
		model.setRows(list);
		model.setTotal(count);
		return model;
	}
	
	
	@Override
	public ModelResults getAnnomentListfb(String Noticetitle, long page, long size)
			 {
		
		Map<String,Object> param = new HashMap<String, Object>();
		param.put("Noticetitle", Noticetitle);
		param.put("pageSize", size);
		param.put("page", page);
		ModelResults model = new ModelResults(page, size);
		List<Map<String, Object>> list = null;
		long count = 0;
		try {
			  list = dao.getDatafb(param);
			  count = dao.getCountfb(param);
		} catch (Exception e) {
			e.printStackTrace();
			return model;
		}
		model.setRows(list);
		model.setTotal(count);
		return model;
	}

	@Override
	public ModelBean updateStatues(long id, long noticestatues) {
		int count = 0;
		ModelBean bean =  new ModelBean();
		Map<String,Object> param = new HashMap<String, Object>();
		param.put("id", id);
		param.put("noticestatues", noticestatues);
		try {
			count = dao.updateStatues(param);
			bean.setData(count);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return bean;
	}

	@Override
	public ModelBean updateshenhe(long id, long noticestatues, String htstatues, String htreason) throws Exception {
		
		int count = 0;
		ModelBean bean =  new ModelBean();
		Map<String,Object> param = new HashMap<String, Object>();
		param.put("id", id);
		param.put("noticestatues", noticestatues);
		param.put("htstatues", htstatues);
		param.put("htreason", htreason);
		try {
			count = dao.updateshenhe(param);
			bean.setData(count);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return bean;
	}

	
	
	@Override
	public ModelBean getDateList1(Integer statues) {
		Map<String,Object> param = new HashMap<String, Object>();
		param.put("statues", statues);
		ModelBean bean = new ModelBean();
		List<Map<String, Object>> list = null;
		try {
			  list = dao.getData1(param);
		} catch (Exception e) {
			e.printStackTrace();
		}
		bean.setObj(list);
		return bean;
	}



}
