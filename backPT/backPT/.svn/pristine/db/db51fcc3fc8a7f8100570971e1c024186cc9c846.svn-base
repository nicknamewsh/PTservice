package com.pt.ssm.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.pt.ssm.constant.MsgConstant;
import com.pt.ssm.dao.DepartDao;
import com.pt.ssm.po.Depart;
import com.pt.ssm.po.Role;
import com.pt.ssm.service.DepartService;
import com.pt.ssm.util.ModelBean;


@Service
@Transactional
public class DepartServiceImpl implements DepartService {
	
	@Autowired
	private DepartDao departDao;
	private List<Depart> deptList = new ArrayList<Depart>();
	
	
	@Override
	public ModelBean getDepartList() {
		ModelBean bean = new ModelBean();
		deptList.clear();
		//获取所有的部门信息
		List<Depart> list = departDao.getAllDept();
		
		
		//循环遍历list  获取你想要得到的数据，放入deptList中，组成新的dept数组
		for (int i = 0; i < list.size(); i++) {
			Depart dept = new Depart();
			dept.setDepartId(list.get(i).getDepartId());
			dept.setDepartName(list.get(i).getDepartName());
			dept.setDpid(list.get(i).getDpid());
			deptList.add(dept);
		}
		//通过递归的方式，组成带有父子关系的部门集合deptList2
		List<Depart> deptList2 = searchAllDept();
		StringBuffer sb = new StringBuffer().append("[");
		//遍历deptList2  重新拼接成你想要的json格式数据
		String msg = toJsonString(sb, deptList2);
		String json = msg + "]";
		bean.setObj(json);
		return bean;
	}

	/**
	 * 拼接成你想要的json格式数据
	 * @param sb
	 * @param deptList2
	 * @return
	 */
	private String toJsonString(StringBuffer sb, List<Depart> deptList2) {
		for (int i = 0; i < deptList2.size(); i++) {
			Depart dept = deptList2.get(i);

			if (null != dept.getChildDepts())
			{
				sb.append("{\"name\":").append("\"").append(dept.getDepartName()).append("\",\"id\":\"").append(dept.getDepartId()).append("\",\"parentid\":\"").append(dept.getDpid()).append("\",\"open\":\"true\"");

				sb.append(",\"children\":[");
				toJsonString(sb, dept.getChildDepts());
				sb.deleteCharAt(sb.toString().length() - 1);
				sb.append("]},");
			}
			else
			{
				sb.append("{\"name\":\"").append(dept.getDepartName()).append("\",\"id\":\"").append(dept.getDepartId()).append("\",\"parentid\":\"").append(dept.getDpid()).append("\"");
				sb.append("},");
			}
		}
		return sb.toString().substring(0, sb.toString().length() - 1);
	}

	/**
	 * 组成带有父子关系的部门集合
	 * @return
	 */
	private List<Depart> searchAllDept() {
		//整个deptList集合
		List<Depart> listAllObject = new ArrayList<Depart>();
		//用来传数据的中间桥梁集合
		List<Object[]> tmp = new ArrayList<Object[]>();
		//返回出去的带有父子级的dept集合
		List<Depart> listAllDept = new ArrayList<Depart>();
		listAllObject = deptList;
		//循环遍历listAllObject 给tmp加入数据
		for (Depart dept : listAllObject) {
			Object[] ro = new Object[3];
			ro[0] = dept.getDepartId();
			ro[1] = dept.getDepartName();
			ro[2] = dept.getDpid();
			tmp.add(ro);
		}

		//循环遍历tmp 给listAllDept加入数据
		for (Object[] row : tmp) {
			//当dpid为0，即：等部门为根部门时
			if (row[2].toString().equals("0")) {
				Depart d = new Depart();
				d.setDepartId((Integer)row[0]);
				d.setDepartName(String.valueOf(row[1]));
				d.setDpid((Integer)row[2]);
				listAllDept.add(d);
				//判断是否有子部门，有子部门则递归造数据
				fomateDept(tmp, d);
			}
		}
		return listAllDept;
	}

	/**
	 * 判断是否有子部门，有子部门则递归造数据
	 * @param tmp
	 * @param dept
	 */
	private void fomateDept(List<Object[]> tmp, Depart dept) {
		for (Object[] row : tmp) {
			//dpid等于deptId时，即：存在子部门时 setChildDepts
			if ((null != row[2])
					&& Integer.parseInt(String.valueOf(row[2])) == dept.getDepartId()) {
				Depart d = new Depart();
				d.setDepartId((Integer)row[0]);
				d.setDepartName(String.valueOf(row[1]));
				d.setDpid((Integer)row[2]);
				List<Depart> list = dept.getChildDepts();
				if (null == list) {
					list = new ArrayList<Depart>();
				}
				list.add(d);
				dept.setChildDepts(list);
				//递归
				fomateDept(tmp, d);
			}
		}
		
	}

	@Override
	public ModelBean getDeptInfoById(Integer departId) {
		ModelBean bean = new ModelBean();
		Map<String, Object> paramMap = new HashMap<String,Object>();
		try {
			paramMap = departDao.getDeptInfoById(departId);
			bean.setCode(MsgConstant.CODE_SUCCESS);
			bean.setSuccess(MsgConstant.MESSAGE_TRUE);
			bean.setObj(paramMap);
			
		} catch (Exception e) {
			e.printStackTrace();
			bean.setCode(MsgConstant.CODE_INTERNALERR);
			bean.setSuccess(MsgConstant.MESSAGE_FALSE);
			bean.setMsg(MsgConstant.MESSAGE_INTERNAL_EXCEPTION);
		}
		
		return bean;
	}

	@Override
	public ModelBean updateDept(Integer deptId, String deptName,String roleId) {
		ModelBean bean = new ModelBean();
		Map<String, Object> paramMap = new HashMap<String,Object>();
		paramMap.put("departName", deptName);
		paramMap.put("departId", deptId);
		paramMap.put("roleId", roleId);
		try {
			Integer info = departDao.updateDept(paramMap);
			paramMap.put("result", info);
			bean.setCode(MsgConstant.CODE_SUCCESS);
			bean.setSuccess(MsgConstant.MESSAGE_TRUE);
			bean.setObj(paramMap);
		} catch (Exception e) {
			e.printStackTrace();
			bean.setCode(MsgConstant.CODE_INTERNALERR);
			bean.setSuccess(MsgConstant.MESSAGE_FALSE);
			bean.setMsg(MsgConstant.MESSAGE_INTERNAL_EXCEPTION);
		}
		
		return bean;
	}

	@Override
	public ModelBean addDept(Integer deptId, String deptName,String roleId) {
		ModelBean bean = new ModelBean();
		Map<String,Object> paramMap = new HashMap<String, Object>();
		paramMap.put("departName", deptName);
		paramMap.put("departId", deptId);
		paramMap.put("roleId", roleId);
		try {
			Integer info = departDao.addDept(paramMap);
			paramMap.put("result", info);
			bean.setCode(MsgConstant.CODE_SUCCESS);
			bean.setSuccess(MsgConstant.MESSAGE_TRUE);
			bean.setObj(paramMap);
		} catch (Exception e) {
			e.printStackTrace();
			bean.setCode(MsgConstant.CODE_INTERNALERR);
			bean.setSuccess(MsgConstant.MESSAGE_FALSE);
			bean.setMsg(MsgConstant.MESSAGE_INTERNAL_EXCEPTION);
		}
		return bean;
	}

	@Override
	public ModelBean getDpidInDeptId(Integer deptId) {
		ModelBean bean = new ModelBean();
		List<Map<String, Object>> userList = null;
		try {
			userList = departDao.getDpidInDeptId(deptId);
			bean.setListData(userList);
			bean.setCode(MsgConstant.CODE_SUCCESS);
			bean.setSuccess(MsgConstant.MESSAGE_TRUE);
		} catch (Exception e) {
			e.printStackTrace();
			bean.setCode(MsgConstant.CODE_INTERNALERR);
			bean.setSuccess(MsgConstant.MESSAGE_FALSE);
			bean.setMsg(MsgConstant.MESSAGE_INTERNAL_EXCEPTION);
		}
		return bean;
	}

	@Override
	public ModelBean deteleDept(Integer deptId) {
		ModelBean bean = new ModelBean();
		Map<String, Object> resultMap = new HashMap<String, Object>();
		try {
			Integer result = departDao.deteleDept(deptId);
			resultMap.put("result", result);
			bean.setCode(MsgConstant.CODE_SUCCESS);
			bean.setSuccess(MsgConstant.MESSAGE_TRUE);
			bean.setObj(resultMap);
		} catch (Exception e) {
			e.printStackTrace();
			bean.setCode(MsgConstant.CODE_INTERNALERR);
			bean.setSuccess(MsgConstant.MESSAGE_FALSE);
			bean.setMsg(MsgConstant.MESSAGE_INTERNAL_EXCEPTION);
		}
		return bean;
	}

	@Override
	public ModelBean getRoleList() {
		ModelBean bean = new ModelBean();
		List<Role> list = new ArrayList<Role>();
		try {
			list = departDao.getRoleList();
			bean.setCode(MsgConstant.CODE_SUCCESS);
			bean.setSuccess(MsgConstant.MESSAGE_TRUE);
			bean.setObj(list);
			
		} catch (Exception e) {
			e.printStackTrace();
			bean.setCode(MsgConstant.CODE_INTERNALERR);
			bean.setSuccess(MsgConstant.MESSAGE_FALSE);
			bean.setMsg(MsgConstant.MESSAGE_INTERNAL_EXCEPTION);
		}
		return bean;
	}

	@Override
	public ModelBean getPidsById(Integer deptId) {
		ModelBean bean = new ModelBean();
		List<Map<String, Object>> userList = null;
		try {
			userList = departDao.getPidsById(deptId);
			bean.setListData(userList);
			bean.setCode(MsgConstant.CODE_SUCCESS);
			bean.setSuccess(MsgConstant.MESSAGE_TRUE);
		} catch (Exception e) {
			e.printStackTrace();
			bean.setCode(MsgConstant.CODE_INTERNALERR);
			bean.setSuccess(MsgConstant.MESSAGE_FALSE);
			bean.setMsg(MsgConstant.MESSAGE_INTERNAL_EXCEPTION);
		}
		return bean;
	}

}
